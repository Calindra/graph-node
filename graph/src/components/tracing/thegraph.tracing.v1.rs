// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EthereumAbiToken {
    #[prost(oneof = "ethereum_abi_token::Value", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
    pub value: ::core::option::Option<ethereum_abi_token::Value>,
}
/// Nested message and enum types in `EthereumABIToken`.
pub mod ethereum_abi_token {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FixedBytes {
        #[prost(uint32, tag = "1")]
        pub size: u32,
        #[prost(bytes = "vec", tag = "2")]
        pub items: ::prost::alloc::vec::Vec<u8>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FixedArray {
        #[prost(uint32, tag = "1")]
        pub size: u32,
        #[prost(message, repeated, tag = "2")]
        pub items: ::prost::alloc::vec::Vec<super::EthereumAbiToken>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Array {
        #[prost(message, repeated, tag = "1")]
        pub array: ::prost::alloc::vec::Vec<super::EthereumAbiToken>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "1")]
        Address(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        Bytes(FixedBytes),
        #[prost(int64, tag = "3")]
        Int(i64),
        #[prost(uint64, tag = "4")]
        Uint(u64),
        #[prost(bool, tag = "5")]
        Bool(bool),
        #[prost(string, tag = "6")]
        Str(::prost::alloc::string::String),
        #[prost(message, tag = "7")]
        Array(Array),
        #[prost(message, tag = "8")]
        Tuple(Array),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EthCallResult {
    #[prost(oneof = "eth_call_result::Result", tags = "1, 2")]
    pub result: ::core::option::Option<eth_call_result::Result>,
}
/// Nested message and enum types in `EthCallResult`.
pub mod eth_call_result {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(string, tag = "1")]
        Error(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        Array(super::ethereum_abi_token::Array),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EthereumCall {
    #[prost(string, tag = "1")]
    pub contract_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub contract_address: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub function_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub function_signature: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub function_args: ::prost::alloc::vec::Vec<EthereumAbiToken>,
    #[prost(message, optional, tag = "6")]
    pub result: ::core::option::Option<EthCallResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WasmError {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub deterministic: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Output {
    #[prost(oneof = "output::Output", tags = "1, 2")]
    pub output: ::core::option::Option<output::Output>,
}
/// Nested message and enum types in `Output`.
pub mod output {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Output {
        #[prost(message, tag = "1")]
        EntityChanges(super::EntityChanges),
        #[prost(message, tag = "2")]
        Error(super::WasmError),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trigger {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    #[prost(message, repeated, tag = "1")]
    pub triggers: ::prost::alloc::vec::Vec<Trigger>,
    #[prost(message, repeated, tag = "2")]
    pub chain_inputs: ::prost::alloc::vec::Vec<ChainSpecificInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainSpecificInput {
    #[prost(oneof = "chain_specific_input::Input", tags = "1")]
    pub input: ::core::option::Option<chain_specific_input::Input>,
}
/// Nested message and enum types in `ChainSpecificInput`.
pub mod chain_specific_input {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Input {
        #[prost(message, tag = "1")]
        Call(super::EthereumCall),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trace {
    #[prost(message, optional, tag = "1")]
    pub inputs: ::core::option::Option<Input>,
    #[prost(message, optional, tag = "2")]
    pub output: ::core::option::Option<Output>,
    #[prost(string, tag = "3")]
    pub poi: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityChanges {
    #[prost(message, repeated, tag = "5")]
    pub entity_changes: ::prost::alloc::vec::Vec<EntityChange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityChange {
    #[prost(string, tag = "1")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub ordinal: u64,
    #[prost(enumeration = "entity_change::Operation", tag = "4")]
    pub operation: i32,
    #[prost(message, repeated, tag = "5")]
    pub fields: ::prost::alloc::vec::Vec<Field>,
}
/// Nested message and enum types in `EntityChange`.
pub mod entity_change {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Operation {
        /// Protobuf default should not be used, this is used so that the consume can ensure that the value was actually specified
        Unset = 0,
        Create = 1,
        Update = 2,
        Delete = 3,
    }
    impl Operation {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Operation::Unset => "UNSET",
                Operation::Create => "CREATE",
                Operation::Update => "UPDATE",
                Operation::Delete => "DELETE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSET" => Some(Self::Unset),
                "CREATE" => Some(Self::Create),
                "UPDATE" => Some(Self::Update),
                "DELETE" => Some(Self::Delete),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(oneof = "value::Typed", tags = "1, 2, 3, 4, 5, 6, 10")]
    pub typed: ::core::option::Option<value::Typed>,
}
/// Nested message and enum types in `Value`.
pub mod value {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Typed {
        #[prost(int32, tag = "1")]
        Int32(i32),
        #[prost(string, tag = "2")]
        Bigdecimal(::prost::alloc::string::String),
        #[prost(string, tag = "3")]
        Bigint(::prost::alloc::string::String),
        #[prost(string, tag = "4")]
        String(::prost::alloc::string::String),
        #[prost(bytes, tag = "5")]
        Bytes(::prost::alloc::vec::Vec<u8>),
        #[prost(bool, tag = "6")]
        Bool(bool),
        #[prost(message, tag = "10")]
        Array(super::Array),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Array {
    #[prost(message, repeated, tag = "1")]
    pub value: ::prost::alloc::vec::Vec<Value>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Field {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub new_value: ::core::option::Option<Value>,
    #[prost(message, optional, tag = "5")]
    pub old_value: ::core::option::Option<Value>,
}
